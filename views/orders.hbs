<!-- 主要內容 -->
<div class="mt-5">

  <div class="card border-0 px-2">

    <!-- <div class="container py-4"> -->
    <!-- 1. 標題 & 搜尋 + 按鈕 -->
    <div class="card-header bg-white bg-transparent d-flex">
      <div class="input-group me-2">
        <span class="input-group-text border-0 bg-transparent">
          <i class="bi bi-search"></i>
        </span>
        <input type="search" class="form-control shadow-none">
      </div>


      <div class="btn-sm bg-dark rounded">
        <button type="button" class="btn btn-dark text-nowrap" disabled>+ 新增訂單</button>
      </div>
    </div>

    <!-- 2. 篩選區 -->
    <div class="d-flex flex-wrap gap-2 mb-4 mt-2">
      <!-- 訂單狀態 -->
      <div class="dropdown">
        <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="filterOrderStatus"
          data-bs-toggle="dropdown" aria-expanded="false">
          所有訂單狀態
        </button>
        <ul class="dropdown-menu" aria-labelledby="filterOrderStatus">
          <li><a class="dropdown-item" href="#" data-value="">所有訂單狀態</a></li>
          <li><a class="dropdown-item" href="#" data-value="pending">待出貨</a></li>
          <li><a class="dropdown-item" href="#" data-value="shipped">已出貨</a></li>
          <li><a class="dropdown-item" href="#" data-value="completed">已完成</a></li>
          <li><a class="dropdown-item" href="#" data-value="cancelled">已取消</a></li>
          <li><a class="dropdown-item" href="#" data-value="returnRequested">已申請退貨</a></li>
          <li><a class="dropdown-item" href="#" data-value="returnAccepted">已同意退貨</a></li>
          <li><a class="dropdown-item" href="#" data-value="returnRejected">已拒絕退貨</a></li>
        </ul>
      </div>
      <!-- 付款狀態 -->
      <div class="dropdown">
        <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="filterPaymentStatus"
          data-bs-toggle="dropdown" aria-expanded="false">
          所有付款狀態
        </button>
        <ul class="dropdown-menu" aria-labelledby="filterPaymentStatus">
          <li><a class="dropdown-item" href="#" data-value="">所有付款狀態</a></li>
          <li><a class="dropdown-item" href="#" data-value="paid">已付款</a></li>
          <li><a class="dropdown-item" href="#" data-value="refunded">已退款</a></li>
          <li><a class="dropdown-item" href="#" data-value="authorizationVoided">已取消授權</a></li>
        </ul>

      </div>
      <!-- 運送狀態 -->
      <div class="dropdown">
        <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="filterDeliveryStatus"
          data-bs-toggle="dropdown" aria-expanded="false">
          所有運送狀態
        </button>
        <ul class="dropdown-menu" aria-labelledby="filterDeliveryStatus">
          <li><a class="dropdown-item" href="#" data-value="">所有運送狀態</a></li>
          <li><a class="dropdown-item" href="#" data-value="processing">處理中</a></li>
          <li><a class="dropdown-item" href="#" data-value="notReceived">尚未收貨</a></li>
          <li><a class="dropdown-item" href="#" data-value="inTransit">運送中</a></li>
          <li><a class="dropdown-item" href="#" data-value="delivered">已到貨</a></li>
          <li><a class="dropdown-item" href="#" data-value="returned">已退貨</a></li>
        </ul>

      </div>
      <!-- 選擇日期 -->
      <div>
        <input type="date" class="form-control" placeholder="選擇日期" aria-label="選擇日期" id="filterDate">
      </div>
      <!-- 金額篩選 -->
      <!-- <div class="dropdown">
        <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="filterAmount"
          data-bs-toggle="dropdown" aria-expanded="false">
          所有金額
        </button>
        <ul class="dropdown-menu" aria-labelledby="filterAmount">
          <li><a class="dropdown-item" href="#" data-value="">所有金額</a></li>
          <li><a class="dropdown-item" href="#" data-value="">$0 - $10</a></li>
          <li><a class="dropdown-item" href="#" data-value="">$10 - $20</a></li>
          <li><a class="dropdown-item" href="#" data-value="">$20 以上</a></li>
        </ul>
      </div> -->
    </div>

    <!-- 3. 資料表 -->
    <div class="table-responsive">
      <table class="table table-hover align-middle">
        <thead class="table-light">
          <tr>
            <th scope="col"><input type="checkbox" /></th>
            <th scope="col">訂單編號</th>
            <th scope="col">客戶</th>
            <th scope="col">日期</th>
            <th scope="col">訂單狀態</th>
            <th scope="col">付款狀態</th>
            <th scope="col">運送狀態</th>
            <th scope="col">金額</th>
            <th scope="col">操作</th>
          </tr>
        </thead>
        <tbody>
          <!-- 後端取得資料渲染訂單列表 -->
        </tbody>

      </table>
    </div>

    <!-- 4. 資料筆數 & 分頁 -->
    <nav class="mt-2" aria-label="Page navigation example">
      <ul class="pagination justify-content-center pagination-white">
        <!-- 這裡的 <li> 會由 JS 動態生成 -->
      </ul>
    </nav>

    <!-- 串接 API -->
    <!-- API 功能：取得所有訂單的列表 (可選日期範圍參數) -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const tbody = document.querySelector("tbody");
        const paginationContainer = document.querySelector(".pagination");
        const API_BASE_URL = window.API_BASE_URL || "http://localhost:3000/api";
        const token = localStorage.getItem("adminToken");

        const statusBtn = document.getElementById("filterOrderStatus");
        const paymentBtn = document.getElementById("filterPaymentStatus");
        const shippingBtn = document.getElementById("filterDeliveryStatus");
        const dateInput = document.getElementById("filterDate");

        let filterValues = {
          orderStatus: "",
          paymentStatus: "",
          shippingStatus: "",
          date: "",
          page: 1
        };

        // 取得訂單資料
        async function fetchOrders() {
          const query = new URLSearchParams();

          if (filterValues.orderStatus) query.append("orderStatus", filterValues.orderStatus);
          if (filterValues.paymentStatus) query.append("paymentStatus", filterValues.paymentStatus);
          if (filterValues.shippingStatus) query.append("shippingStatus", filterValues.shippingStatus);
          if (filterValues.date) {
            query.append("startDate", filterValues.date);
            query.append("endDate", filterValues.date);
          }
          if (filterValues.page) query.append("page", filterValues.page);

          try {
            const res = await fetch(`${API_BASE_URL}/admin/orders?${query.toString()}`, {
              headers: {
                Authorization: `Bearer ${token}`,
              },
            });

            const result = await res.json();
            if (!result.status) return alert("查詢失敗：" + result.message);

            renderOrders(result.data.orders);
            renderPagination(result.data.pagination);
          } catch (err) {
            console.error("Fetch failed:", err);
            alert("⚠️ 查詢失敗");
          }
        }

        // 渲染訂單列表
        function renderOrders(orders) {
          tbody.innerHTML = "";
          orders.forEach(order => {
            const tr = document.createElement("tr");
            tr.innerHTML = `
            <td><input type="checkbox" /></td>
            <td class="text-start"><a href="/ordersDetail?orderNumber=${order.orderNumber}">#${order.orderNumber}</a></td>
            <td class="text-start">${order.userName}</td>
            <td>${order.createdAt.split("T")[0]}</td>
            <td><span class="badge ${getBadgeClass(order.orderStatus)}">${getLabel(order.orderStatus)}</span></td>
            <td><span class="badge ${getBadgeClass(order.paymentStatus)}">${getLabel(order.paymentStatus)}</span></td>
            <td><span class="badge ${getBadgeClass(order.shippingStatus)}">${getLabel(order.shippingStatus)}</span></td>
            <td>$${order.finalAmount.toFixed(0)}</td>
            <td>
              <div class="dropdown">
                <button class="btn btn-link text-dark p-0" data-bs-toggle="dropdown">
                  <i class="bi bi-three-dots-vertical"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                  <li><a class="dropdown-item" href="/ordersEdit?orderNumber=${order.orderNumber}"><i class="bi bi-pencil me-2"></i>編輯</a></li>
                  <li><hr class="dropdown-divider" /></li>
                  <li><a class="dropdown-item text-danger" href="#" onclick="return confirm('確定要刪除嗎？')"><i class="bi bi-trash me-2"></i>刪除</a></li>
                </ul>
              </div>
            </td>
          `;
            tbody.appendChild(tr);
          });
        }

        // 渲染分頁
        function renderPagination({ page, totalPages }) {
          let html = "";

          html += `<li class="page-item ${page === 1 ? 'disabled' : ''}">
                   <a class="page-link" href="#" data-page="${page - 1}">&laquo;</a>
                 </li>`;

          for (let i = 1; i <= totalPages; i++) {
            html += `<li class="page-item ${i === page ? 'active' : ''}">
                     <a class="page-link" href="#" data-page="${i}">${i}</a>
                   </li>`;
          }

          html += `<li class="page-item ${page === totalPages ? 'disabled' : ''}">
                   <a class="page-link" href="#" data-page="${page + 1}">&raquo;</a>
                 </li>`;

          paginationContainer.innerHTML = html;

          paginationContainer.querySelectorAll(".page-link").forEach(link => {
            link.addEventListener("click", e => {
              e.preventDefault();
              const targetPage = Number(e.target.dataset.page);
              if (!isNaN(targetPage)) {
                filterValues.page = targetPage;
                fetchOrders();
              }
            });
          });
        }

        // 下拉選單通用綁定
        function setupDropdown(filterKey, buttonEl) {
          const items = buttonEl.nextElementSibling.querySelectorAll(".dropdown-item");
          items.forEach(item => {
            item.addEventListener("click", e => {
              e.preventDefault();
              const value = item.getAttribute("data-value") || "";
              const label = item.textContent;
              filterValues[filterKey] = value;
              filterValues.page = 1; // 切換篩選時重設回第一頁
              buttonEl.textContent = label;
              fetchOrders();
            });
          });
        }

        // 狀態名稱轉中文
        function getLabel(key) {
          const map = {
            // 訂單狀態
            pending: "待出貨",
            shipped: "已出貨",
            completed: "已完成",
            cancelled: "已取消",
            returnRequested: "已申請退貨",
            returnAccepted: "已同意退貨",     // ✅ 對應後端 approveReturn
            returnRejected: "已拒絕退貨",       // ✅ 對應後端 rejectReturn


            // 付款狀態
            paid: "已付款",
            refunded: "已退款",
            authorizationVoided: "已取消授權",
            // 運送狀態
            notReceived: "尚未收貨",
            processing: "處理中",
            inTransit: "運送中",
            delivered: "已到貨",
            returned: "已退貨",
          };
          return map[key] || key;
        }

        // 樣式配色對應
        function getBadgeClass(key) {
          const colormap = {
            // 訂單狀態
            pending: "bg-warning text-dark",
            shipped: "bg-primary text-white",
            completed: "bg-success text-white",
            cancelled: "bg-secondary text-white",
            returnRequested: "bg-warning text-dark",
            returnAccepted: "bg-primary text-white",
            returnRejected: "bg-danger text-white",
            // 付款狀態
            paid: "bg-success text-white",
            refunded: "bg-secondary text-white",
            authorizationVoided: "bg-secondary text-white",
            // 運送狀態
            notReceived: "bg-secondary text-white",
            processing: "bg-info text-dark",
            inTransit: "bg-primary text-white",
            delivered: "bg-success text-white",
            returned: "bg-danger text-white",
          };
          return colormap[key] || "bg-dark";
        }

        // 日期篩選
        if (dateInput) {
          dateInput.addEventListener("change", () => {
            filterValues.date = dateInput.value;
            filterValues.page = 1;
            fetchOrders();
          });
        }

        // 初始化篩選器
        setupDropdown("orderStatus", statusBtn);
        setupDropdown("paymentStatus", paymentBtn);
        setupDropdown("shippingStatus", shippingBtn);

        // 初始載入
        fetchOrders();
      });
    </script>